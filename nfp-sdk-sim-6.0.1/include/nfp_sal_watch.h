/*
 * Copyright (C) 2012-2013,  Netronome Systems, Inc.  All rights reserved.
 */

#ifndef __NFP_SAL_WATCH_H__
#define __NFP_SAL_WATCH_H__

#include <stdint.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/cdefs.h>

#include <nfp.h>

#include "_nfp_sal_apiex.h"


__BEGIN_DECLS;

/** @file nfp_sal_watch.h
 *  @addtogroup nfsal NFSAL
 *  @{
 */

/** @name Functions for accessing watch features within the NFP simulator
 *  @{
 *
 * Watch related NFP simulator functions; watches are used for
 * generating notifications on simulation state changes
 * (notify-on-change) or for stopping the simulator break on
 * state changes (break-on-change). The event format for watches
 * is described in @a sim_events.h.
 *
 */

/** The types of watch actions available */
enum NFP_SAL_WATCH_ACTIONS {
    /** Stop simulator and send notification */
    NFP_SAL_WATCH_ACTION_BREAK = 0,
    /** Just send notification */
    NFP_SAL_WATCH_ACTION_NOTIFY,
    /** When watch condition is met simulator enters a paused state */
    NFP_SAL_WATCH_ACTION_PAUSE,
};

/** The types of watches available */
enum NFP_SAL_WATCH_TYPES {
    /** Action on change */
    NFP_SAL_WATCH_TYPE_CHANGE = 0,
    /** Action on change with respect to a provided value */
    NFP_SAL_WATCH_TYPE_VALUE,
    /** Alias for NFP_SAL_WATCH_TYPE_VALUE */
    NFP_SAL_WATCH_TYPE_VALUECHANGE = NFP_SAL_WATCH_TYPE_VALUE,
    /** Action on write - applies to memories only */
    NFP_SAL_WATCH_TYPE_WRITE,
    /** Action on write with respect to a provided value */
    NFP_SAL_WATCH_TYPE_VALUEWRITE,
    /** Action on maximum value */
    NFP_SAL_WATCH_TYPE_MAXED,
    /** Action on active - applies to bus events */
    NFP_SAL_WATCH_TYPE_ACTIVE,
};

/** The operations for VALUE watch types */
enum NFP_SAL_WATCH_OPS {
    /** Trigger when state equals the reference value */
    NFP_SAL_WATCH_OP_EQUALS = 0,
    /** Trigger when state is not equal to the reference value */
    NFP_SAL_WATCH_OP_NOTEQUALS,
    /** Trigger when state is less than the reference value */
    NFP_SAL_WATCH_OP_LTHAN,
    /** Trigger when state is greater than the reference value */
    NFP_SAL_WATCH_OP_GTHAN,
    /** Trigger when state is less than, or equal to the reference value */
    NFP_SAL_WATCH_OP_LEQUALS,
    /** Trigger when state is greater than, or equal to the reference value */
    NFP_SAL_WATCH_OP_GEQUALS,
};

/** Use to form @a watchtype for watch-related functions */
#define NFP_SAL_WATCH_WTYPE(action, type) \
        ((((NFP_SAL_WATCH_OP_EQUALS) & 0xff) << 16) | \
         (((action) & 0xff) << 8)  | \
          (((  type) & 0xff) << 0))

/** Use to form @a watch_type for VALUE watches */
#define NFP_SAL_WATCH_WTYPEOP(op, action, type) \
        ((((    op) & 0xff) << 16) | \
         (((action) & 0xff) << 8)  | \
         (((  type) & 0xff) << 0))

/** Extract the type from the @a watchtype */
#define NFP_SAL_WATCH_TYPE(bt) ((bt) & 0xff)
/** Extract the action from the @a watchtype */
#define NFP_SAL_WATCH_ACTION(bt) (((bt) >> 8) & 0xff)
/** Extract the operation from the @a watchtype */
#define NFP_SAL_WATCH_OP(bt) (((bt) >> 16) & 0xff)

/** The types of cycle breaks */
enum NFP_SAL_WATCH_CYCLE_TYPES {
    /** Cycle is absolute */
    NFP_SAL_WATCH_CYCLE_ABSOLUTE = 0,
    /** Cycle is relative to current count */
    NFP_SAL_WATCH_CYCLE_RELATIVE,
};

/** Types of network breaks */
enum NFP_SAL_WATCH_NET_TYPES {
    /** Ethernet ingress queue level */
    NFP_SAL_WATCH_NET_ETH_IG = 0,
    /** Ethernet egress queue level */
    NFP_SAL_WATCH_NET_ETH_EG,
    /** Interlaken ingress queue level */
    NFP_SAL_WATCH_NET_ILK_IG,
    /** Interlaken egress queue level */
    NFP_SAL_WATCH_NET_ILK_EG,
};

/**
 * Flush watches
 *
 * @param dev           NFP device
 * @param flush_all     When non-zero delete all watches, even those not
 *                      associated with the provided nfp_device handle
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_flush(struct nfp_device *dev, int flush_all);

/**
 * Delete a watch
 *
 * @param dev           NFP device
 * @param watchid       The watch ID to delete
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_del(struct nfp_device *dev, uint64_t watchid);

/**
 * Clear a pause generated by a watch
 *
 * @param dev           NFP device
 * @param watchid       The watch ID to delete
 *
 * If watchtype @a NFP_SAL_WATCH_ACTION_PAUSE is used the simulator may
 * enter a paused state; use this function to clear the pause associated
 * with a watch.
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_pause_clear(struct nfp_device *dev, uint64_t watchid);

/**
 * Flush all paused watches
 *
 * @param dev           NFP device
 * @param flush_all     When non-zero flush all pauses, even those not
 *                      associated with the provided nfp_device handle
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_pause_flush(struct nfp_device *dev, int flush_all);

/**
 * Add an ME program counter watch for a specific context
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param menum         ME number
 * @param ctxmask       Mask for context match, -1 or 0 for all contexts
 * @param pc            Program counter value, -1 for any change
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_pc(struct nfp_device *dev, int watchtype, uint64_t watchid, unsigned int menum, int ctxmask, int pc);

/**
 * Add a watch on an XPB CSR
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param xpb_tgt       XPB target and address
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_xpb(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, uint32_t xpb_tgt);

/**
 * Add a watch on an CPP CSR
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param cppid         CPP ID
 * @param address       CPP address
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_cpp(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, uint32_t cppid, uint64_t address);

/**
 * Add a watch on an ME CSR
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param menum         ME number
 * @param ctx           ME context
 * @param csr           ME CSR offset
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_mecsr(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, unsigned int menum, int ctx, unsigned int csr);

/**
 * Add a watch on an ME register
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param menum         ME number
 * @param reg           Register offset
 *
 * Add an ME register watch. [23:16] of @a reg indicate the register type
 * to write and bits [15:2] indicate the register index.  It is
 * recommended that the nfp_mereg() family of functions be used to
 * supply the REG parameter.
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_me_register(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, unsigned int menum, unsigned int reg);

/**

 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param menum         ME number
 * @param offset        Memory offset to use, must be 4-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_lmem(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, unsigned int menum, unsigned int offset);

/**
 * Add a watch to a CLS word (8B)
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param islnum        Island number
 * @param offset        Offset into memory, must be 8-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_cls(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, int islnum, unsigned long long offset);

/**
 * Add a watch to a CTM word
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param islnum        Island number
 * @param offset        Offset into memory, must be 8-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_ctm(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, int islnum, unsigned long long offset);

/**
 * Add a watch to an External Memory word
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param islnum        Island number
 * @param offset        Offset into memory, must be 8-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_emem(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, int islnum, unsigned long long offset);

/**
 * Add a watch to an Internal Memory word
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param islnum        Island number
 * @param offset        offset into memory, must be 8-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_imem(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, int islnum, unsigned long long offset);

/**
 * Add a watch to a Crypto memory location
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param islnum        Crypto island number
 * @param memtype       Crypto memory type
 * @param offset        Offset into memory, must be 8-byte aligned
 *
 * Watch applies to a single 64-bit value
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_crypto(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, int islnum, int memtype, unsigned long offset);

/**
 * Add a watch to an ILA shared memory location
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param islnum        Island number
 * @param offset        Offset into memory, must be 8-byte aligned
 *
 * Watch applies to a single 64-bit value
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_ila_shmem(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, int islnum, unsigned long offset);

/**
 * Add a watch to an External Memory data cache memory location
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param watchmask     Mask to apply to register data
 * @param watchvalue    Value to compare register data with (VALUE watches only)
 * @param islnum        Island number
 * @param offset        Offset into memory, must be 8-byte aligned
 *
 * Watch applies to a single 64-bit value
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_emem_dc(struct nfp_device *dev, int watchtype, uint64_t watchid, uint64_t watchmask, uint64_t watchvalue, int islnum, unsigned long offset);

/**
 * Add a watch to a CLS region
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param islnum        Island number
 * @param length        Region size in bytes, must be 8-byte aligned
 * @param offset        Region offset in bytes, must be 8-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_cls_area(struct nfp_device *dev, int watchtype, uint64_t watchid, int islnum, unsigned long long length, unsigned long long offset);

/**
 * Add a watch to a CTM region
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param islnum        Island number
 * @param length        Region size in bytes, must be 8-byte aligned
 * @param offset        Region offset in bytes, must be 8-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_ctm_area(struct nfp_device *dev, int watchtype, uint64_t watchid, int islnum, unsigned long long length, unsigned long long offset);

/**
 * Add a watch to a External Memory region
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param islnum        Island number
 * @param length        Region size in bytes, must be 8-byte aligned
 * @param offset        Region offset in bytes, must be 8-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_emem_area(struct nfp_device *dev, int watchtype, uint64_t watchid, int islnum, unsigned long long length, unsigned long long offset);

/**
 * Add a watch to a Internal Memory region
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param islnum        Island number
 * @param length        Region size in bytes, must be 8-byte aligned
 * @param offset        Region offset in bytes, must be 8-byte aligned
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_imem_area(struct nfp_device *dev, int watchtype, uint64_t watchid, int islnum, unsigned long long length, unsigned long long offset);

/**
 * Add a watch to the global ME cycle count
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param type          Type of cycle watch, use @a NFP_SAL_WATCH_CYCLE_TYPES
 * @param cycle         Cycle number
 *
 * Send a notification, break or pause the simulator when a specific ME cycle
 * is reached
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_cycle(struct nfp_device *dev, int watchtype, uint64_t watchid, int type, uint64_t cycle);

/**
 * Add a watch to the network queue level
 *
 * @param dev           NFP device
 * @param watchtype     The type of watch, form with NFP_SAL_WATCH_WTYPE* macros
 * @param watchid       Unique identifier for watch
 * @param type          Type of queue see @a NFP_SAL_WATCH_NET_TYPES
 * @param nbi           NBI number
 * @param port          NBI port number
 * @param level         Reference level
 *
 * Send a notification, break or pause the simulator when a specific Network
 * queue level is reached or changes
 *
 * @returns 0 on success, or -1 on failure (sets errno accordingly)
 */
NFP_SAL_API
int nfp_sal_watch_add_net(struct nfp_device *dev, int watchtype, uint64_t watchid, int type, int nbi, int port, int level);

/** @}
 * @}
 */

__END_DECLS;

#endif /* !__NFP_SAL_WATCH_H__ */
