#!/Library/Frameworks/Python.framework/Versions/3.4/bin/python3

import json
import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-app', default='app.json', type=argparse.FileType('r'))
parser.add_argument('-cmp', type=argparse.FileType('r'))
parser.add_argument('-out', default='Makefile', type=argparse.FileType('w'))
parser.add_argument('-platform', default='bataan')
args = parser.parse_args()
if args.app is None:
    print( "Error opening app json file")
    exit(1)
if args.out is None:
    print( "Error opening output file")
    exit(1)
if args.cmp is None:
    cjso = None
else:
    cjs = args.cmp.read()
    cjso = json.loads(cjs)

if not cjso is None:
    print( "components.json found\n")
    components_list = list(cjso)
    valid_compo_list = []
    me_compo_list = []
    for compo in components_list:
        print( "compornent:" + compo)
        comp_obj = cjso.get( compo )
        appended = 0
        if not comp_obj is None:
            compiler_obj = comp_obj.get( "compiler" )
            if not compiler_obj is None:
                src_list = compiler_obj.get( "src" )
                if not src_list is None:
                    valid_compo_list.append( compo )
                    appended = 1
                else:
                    inc_list = compiler_obj.get( "include")
                    if not inc_list is None:
                        valid_compo_list.append(compo)
                        appended = 1
        if appended == 0:
            assembler_obj = comp_obj.get( "assembler" )
            if not assembler_obj is None:
                src_list = assembler_obj.get( "src")
                if not src_list is None:
                    valid_compo_list.append(compo)
            else:
                print("empty compornents - " + compo)


print ( valid_compo_list )

js = args.app.read()
jso = json.loads(js)
if jso is None:
    print( "Error reading json file" )
    exit(1)
proj_name = jso.get("name")
print(proj_name)
#proj_obj_name = proj_name + "_obj"

var_obj = jso.get("vars")
var_list = list(var_obj)
print(var_list)
#for v in var_list:
#    t = var_obj.get(v)
#    if isinstance(t, str):
#        print( v + ": " + t )
#    else:
#        print( "%s: %d" % (v, t))



mfile = args.out
platform_name = args.platform

comment = """
#######################################################################################################################
# Auto generated by %s
#   Do not edit manually!! 
#######################################################################################################################
"""
mfile.write( comment % sys.argv[0] )
mfile.write( "include Makefile.head\n")
#print(make_name)

common_obj = jso.get('common')
common_comple_flags = ""
common_comp_flags = common_obj.get('compiler').get('flags')
for frg in common_comp_flags:
    common_comple_flags += " " + frg

common_link_flags = ""
linker_obj = common_obj.get('linker')
if not linker_obj is None:
    common_linker_flags = linker_obj.get('flags')
    if not common_linker_flags is None:
        for f in common_linker_flags:
            common_link_flags += ( f + " ")
    pico_obj = linker_obj.get( "pico")


#print(common_comple_flags)

#component
components_obj = jso.get('components')
components_list = list(components_obj)
for compo in components_list:
    comp_obj = components_obj.get( compo )
    if not comp_obj is None:
        print("  compornent:" + compo)
        compiler_obj = comp_obj.get( "compiler" )
        if not compiler_obj is None:
            src_list = compiler_obj.get( "src" )
            if not src_list is None:
                valid_compo_list.append( compo )
            else:
                inc_list = compiler_obj.get("include")
                if not inc_list is None:
                    valid_compo_list.append(compo)
                else:
                    inc_list = compiler_obj.get("forceinclude")
                    if not inc_list is None:
                        valid_compo_list.append(compo)
                    else:
                        print( "  empty..")
        else:
            assembler_obj = comp_obj.get( "assembler" )
            if not assembler_obj is None:
                src_list = assembler_obj.get( "src")
                if not src_list is None:
                    valid_compo_list.append(compo)
                else:
                    inc_list = assembler_obj.get("include")
                    if not inc_list is None:
                        valid_compo_list.append(compo)
                    else:
                        inc_list = assembler_obj.get("forceinclude")
                        if not inc_list is None:
                            valid_compo_list.append(compo)
                        else:
                            print("  empty..")

print ( valid_compo_list )
targets_obj = jso.get

platforms_obj = jso.get( 'platforms' )

tgets_obj = jso.get( "targets" )

targets_list = list(tgets_obj)


def var_convert( s ):
    import re
    p = re.compile( '%\((\S+)\)s' )
    result = p.search(s)
    if( result is None ):
        return s
    else:
        nn = result.group(1)
        #print( "found!" + nn )
        for v in var_list:
            if nn == v:
                t = var_obj.get(v)
                if not isinstance(t, str):
                    t = str(t)
                re = p.sub( t, s )
                print( re )
                return re
            #else:
                #print ( nn + " is not " + v )
    return s

def gen_common_def(name, common_defs):
    for d in common_defs:
        mfile.write("$(eval $(call micro_c.add_define,%s,%s))\n" % (name, d))

def gen_common_def_asm(name, common_defs):
    for d in common_defs:
        mfile.write("$(eval $(call microcode.add_flags,%s,-D%s))\n" % (name, d))


def gen_comp_def_inc( name, compiler_obj ):
    defines_array = compiler_obj.get("defines")
    if not defines_array is None:
        for d in defines_array:
            mfile.write("$(eval $(call micro_c.add_define,%s,%s))\n" % (name, d))
            # mfile.write("OBJ_%s__DEFS += -D%s\n" %(platform_target_name, d))
    else:
        print("defines is empty\n")
    includes_array = compiler_obj.get("include")
    if not includes_array is None:
        for inc in includes_array:
            inc = var_convert(inc)
            mfile.write("$(eval $(call micro_c.add_include,%s,%s))\n" % (name, inc))

def gen_compo( name, compo_name, last, common_defs, compiler_obj, comp_obj ):
    print( "platform %s component:%s" %(name, compo_name))
    mfile.write( "#platform %s component:%s\n" %(name, compo_name))
    compo_obj = components_obj.get( compo_name )
    if compo_obj is None:
        compo_obj = cjso.get( compo_name )
        if compo_obj is None:
            print( "component: %s not found" %(compo_name))
            return
    dir = compo_obj.get("dir")
    if dir is None:
        dir = "."
    else:
        dir = var_convert(dir)
    if dir == "":
        dir = "."
    comp_o = compo_obj.get("compiler")
    if not comp_o is None:
        inc_list = comp_o.get("forceinclude")
        if not inc_list is None and len(inc_list) > 0:
            for inc in inc_list:
                inc = var_convert(inc)
                inc = inc.split('.', 1)[0]
                #        inc = var_convert(inc)
                #        if inc == ".":
                #            inc = ""
                mfile.write("$(eval $(call micro_c.force_include,%s,%s,%s))\n" % (name, inc, dir))
        src_l = 0
        src_list = comp_o.get("src")
        if not src_list is None:
            src_l = len(src_list)
        if src_l > 0:
            inc_list = comp_o.get( "include" )
            if not inc_list is None:
                for inc in inc_list:
                    inc = var_convert(inc)
                    if inc == ".":
                        inc = ""
                    mfile.write( "$(eval $(call micro_c.add_include,%s,%s/%s))\n" % (name, dir, inc))
            length = len(src_list)-1
            index = 0
            for src in src_list:
                src = var_convert(src)
                if last is True and index == length:
                    #print( "$(eval $(call micro_c.compile_with_rtl, %s, %s, %s))" %(list_name, src, dir))
                    mfile.write( "$(eval $(call micro_c.compile,%s,%s,%s))\n" %(name, src, dir))
                else:
                    src = src.split('.', 1)[0]
                    #print( "$(eval $(call micro_c.add_src_lib, %s, %s, %s))" %(list_name, src, dir))
                    mfile.write("$(eval $(call micro_c.add_src_lib,%s,%s,%s))\n" % (name, src, dir))
                index += 1
    assem_o = compo_obj.get( "assembler" )
    if not assem_o is None:
        inc_list = assem_o.get( "include" )
        if not inc_list is None:
            for inc in inc_list:
                inc = var_convert(inc)
                if inc == "." and dir == ".":
                    mfile.write("$(eval $(call microcode.add_flags,%s,-I%s))\n" % (name, inc))
                else:
                    mfile.write( "$(eval $(call microcode.add_flags,%s,-I%s/%s))\n" % (name, dir, inc))
        #inc_list = assem_o.get( "forceinclude" )
        #if not inc_list is None:
        #    for inc in inc_list:
        #        inc = var_convert(inc)
        #        mfile.write( "$(eval $(call microcode.add_flags,%s,-I%s/%s))\n" % (name, dir, inc))
        src_list = assem_o.get("src")
        if not src_list is None:
            if len(src_list) >0:
                asm_files = ""
                for src in src_list:
                    src = var_convert(src)
                    asm_files += dir + "/" + src + " "
                    mfile.write("$(eval $(call microcode.assemble,%s,%s))\n" % (name, asm_files))


## Compile target per platform level to refrect the flags per platform level
#  name carries the 
def gen_target( tname, name, tgt_obj, common_defs, compiler_obj=None ):
    compo_list = tgt_obj.get("components")
    comp_obj = tgt_obj.get( "compiler" )
    mes = tgt_obj.get( "mes")
    mfile.write("#target " + tname + "\n")
    mes_l = 0
    if not mes is None:
        mes_l = len(mes)
    if mes_l > 0:
        print( "me target " + tname )
        list = tgt_obj.get("list")
        if list is None:
            list = name+"mes"
        list = var_convert( list )
        name = list
        if not common_defs is None and len(common_defs) > 0:
            gen_common_def(name, common_defs)
        if not compiler_obj is None:
            gen_comp_def_inc(name, compiler_obj)
    if not comp_obj is None:
        flag_list = comp_obj.get("flags")
        if not flag_list is None:
            for f in flag_list:
                f = var_convert( f )
                #print( "$(eval $(micro_c.add_flags( %s, %s ))\n" % (l_name, f))
                mfile.write("$(eval $(call micro_c.add_flags,%s,-%s))\n" % (name, f))
        def_list = comp_obj.get("defines")
        if not def_list is None:
            for d in def_list:
                d = var_convert( d )
                #print( "$(eval $(micro_c.add_define( %s, %s ))" % (l_name, d))
                mfile.write( "$(eval $(call micro_c.add_define,%s,%s))\n" % (name, d))
    length = 0
    for compo_name in compo_list:
        if compo_name in valid_compo_list:
            length += 1
    index = 0
    for compo_name in compo_list:
        if compo_name in valid_compo_list:
            #print( "index %d length %d" % (index, length))
            #mfile.write( "\n")
            gen_compo( name, compo_name, index == length-1, common_defs, compiler_obj, comp_obj )
            index += 1
    if not mes is None:
        for me in mes:
            mfile.write('$(eval $(call fw.add_obj,%s,%s,%s))\n' % (proj_name, name, me))

            # mes in target is not supported for now
    #mes = tgt_obj.get("mes")
    #if not mes is None:
    #    for me in mes:
    #        me = var_convert( me )
    #        #print('$(eval $(call fw.add_obj, %s, %s, %s))' % (proj_obj_name, l_name, me))
    #        mfile.write('$(eval $(call fw.add_obj,%s,%s,%s))\n' % (proj_obj_name, l_name, me))



def gen_platform( platform, p_obj ):
    # process "common" : "defines"
    name_num = 0
    common_obj = p_obj.get( "common" )
    if not common_obj is None:
        common_defs = common_obj.get("defines")
        #if not defs is None:
        #    for def in defs:
        #        mfile.write( "$(eval $(microc.add_define( %s,%s ))\n" % (name, def))
    #New link_targets build
    targets_obj = p_obj.get( "link_targets" )
    #Original targets build
    if not targets_obj is None:
        t_list = list( targets_obj )
        for target in t_list:
            targ_obj = targets_obj.get( target )
            target_name = targ_obj.get( "target" )
            platform_target_name = platform + "_" + target
            mes_list = targ_obj.get( "mes" )
            if not mes_list is None and len(mes_list) > 0:
                #process common defines
                #if not common_defs is None:
                    #for d in common_defs:
                        #mfile.write( "$(eval $(call micro_c.add_define,%s,%s))\n" % (platform_target_name, d))
                        #mfile.write("OBJ_%s__DEFS += -D%s\n" % (platform_target_name, d))

                # process per target defines
                compiler_obj = targ_obj.get("compiler")
                if not compiler_obj is None:
                    gen_comp_def_inc(platform_target_name, compiler_obj)
                else:
                    print("compiler is empty\n")
                tgt_obj = tgets_obj.get(target_name)
                gen_target( target, platform_target_name, tgt_obj, common_defs, compiler_obj )
                for me in mes_list:
                    me = var_convert( me )
                    #print( '$(eval $(call fw.add_obj,%s,%s,%s))' % ( proj_obj_name, target, me ))
                    mfile.write('$(eval $(call fw.add_obj,%s,%s,%s))\n' % (proj_name, platform_target_name, me))
    targets_obj = p_obj.get( "targets" )
    #Original targets build
    if not targets_obj is None:
        t_list = list( targets_obj )
        for target in t_list:
            targ_obj = targets_obj.get( target )
            platform_target_name = platform + "_" + target + "_" + str(name_num)
            name_num+= 1
            mes_list = targ_obj.get( "mes" )
            if not mes_list is None:
                if len(mes_list) > 0:
                    print( "target:", target, " MES:",  mes_list)
                    #process common defines

                    # process per target defines
                    compiler_obj = targ_obj.get("compiler")
                    #if not compiler_obj is None:
                    #    defines_array = compiler_obj.get("defines")
                    #    if not defines_array is None:
                    #        for d in defines_array:
                    #            mfile.write( "$(eval $(call micro_c.add_define,%s,%s))\n" % (platform_target_name, d))
                                #mfile.write("OBJ_%s__DEFS += -D%s\n" %(platform_target_name, d))
                    #    else:
                    #        print( "defines is empty\n")
                    #    includes_array = compiler_obj.get("include")
                    #    if not includes_array is None:
                    #        for inc in includes_array:
                    #            inc = var_convert(inc)
                    #            mfile.write("$(eval $(call micro_c.add_include,%s,%s))\n" % (platform_target_name, inc))
                                #mfile.write("OBJ_%s__DEFS += -D%s\n" %(platform_target_name, inc))
                    #else:
                    #    print("compiler is empty\n")
                    tgt_obj = tgets_obj.get(target)
                    gen_target(target, platform_target_name, tgt_obj, common_defs, compiler_obj)
                    for me in mes_list:
                        me = var_convert( me )
                        #print( '$(eval $(call fw.add_obj,%s,%s,%s))' % ( proj_obj_name, target, me ))
                        mfile.write('$(eval $(call fw.add_obj,%s,%s,%s))\n' % (proj_name, platform_target_name, me))

#testing gen_target
#for tgt in targets_list:
    #if( tgt == "pif_app_nfd" ):
    #tgt_obj = tgets_obj.get( tgt )
    #gen_target( tgt, tgt_obj )


if platforms_obj is None:
    exit(0)

platforms_list = list( platforms_obj )
for platform in platforms_list:
    if platform == platform_name:
        plf_obj = platforms_obj.get(platform)
        gen_platform( platform, plf_obj )

        mfile.write("$(eval $(call fw.add_ppc,%s,i8,$(PICO_CODE)))\n" % proj_name )
        mfile.write("$(eval $(call fw.add_ppc,%s,i9,$(PICO_CODE)))\n" % proj_name )
        mfile.write("$(eval $(call fw.link_with_rtsyms,%s))\n" % proj_name )

""" testing var_convert
compos = jso.get('components')
pif_m = compos.get( 'pif_main_common')
comp = pif_m.get( 'compiler')
src = comp.get('src')
for st in src:
    print(st)
    var_convert(st)
"""


mfile.write( "include Makefile.tail\n")



